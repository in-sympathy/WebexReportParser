function main(workbook: ExcelScript.Workbook) {
  const sheet = workbook.getActiveWorksheet();

  // Freeze header row
  sheet.getFreezePanes().freezeRows(1);

  // Get used range and headers
  const usedRange = sheet.getUsedRange();
  const headers = usedRange.getRow(0).getValues()[0] as string[];

  const emailColumn = "Attendee Email";
  const durationColumn = "Attendance Duration";

  const emailIdx = headers.indexOf(emailColumn);
  const durationIdx = headers.indexOf(durationColumn);

  if (emailIdx === -1 || durationIdx === -1) {
    throw new Error(`Required columns "${emailColumn}" or "${durationColumn}" not found.`);
  }

  const lastCol = headers.length;

  // Add new columns ("Training Duration", "Percentage")
  sheet.getCell(0, lastCol).setValue("Training Duration");
  sheet.getCell(0, lastCol + 1).setValue("Percentage");

  const totalCols = lastCol + 2;
  const totalRows = usedRange.getRowCount();
  const fullRange = sheet.getRangeByIndexes(0, 0, totalRows, totalCols);
  const table = sheet.addTable(fullRange.getAddress(), true);
  table.setName("AttendanceReport");

  // Set "Training Duration" to 90 mins
  const numRows = table.getRowCount();
  table.getColumnByName("Training Duration").getRangeBetweenHeaderAndTotal()
    .setValues(Array(numRows).fill([90]));

  // Clean "Attendance Duration" column (remove " mins")
  const durationRange = table.getColumnByName(durationColumn).getRangeBetweenHeaderAndTotal();
  durationRange.replaceAll(" mins", "", { completeMatch: false, matchCase: false });

  // Consolidate by email
  const data = table.getRangeBetweenHeaderAndTotal().getValues();
  const grouped = new Map<string, { row: (string | number | boolean)[], total: number }>();

  data.forEach(row => {
    const email = row[emailIdx] as string;
    const duration = parseFloat(row[durationIdx] as string) || 0;
    if (grouped.has(email)) {
      grouped.get(email)!.total += duration;
    } else {
      grouped.set(email, { row: row.slice(), total: duration });
    }
  });

  // Clear original rows
  table.getRangeBetweenHeaderAndTotal().delete(ExcelScript.DeleteShiftDirection.up);

  // Add grouped data back
  const consolidatedRows: (string | number | boolean)[][] = [];
  grouped.forEach(({ row, total }) => {
    row[durationIdx] = total;
    consolidatedRows.push(row);
  });
  table.addRows(-1, consolidatedRows);

  // Set formula in "Percentage" column
  const percentageCol = table.getColumnByName("Percentage");
  percentageCol.getRangeBetweenHeaderAndTotal()
    .setFormulasLocal(Array(consolidatedRows.length)
      .fill([`=[@[${durationColumn}]]/[@[Training Duration]]`]));
  percentageCol.getRangeBetweenHeaderAndTotal().setNumberFormat("0%");

  // Sort by Attendance Duration ascending
  table.getSort().apply([{ key: durationIdx, ascending: true }]);

  // CONDITIONAL FORMATTING on entire row based on Percentage
  const bodyRange = table.getRangeBetweenHeaderAndTotal();
  const percentColLetter = String.fromCharCode(65 + percentageCol.getIndex());
  const startRow = bodyRange.getRowIndex() + 1;

  // RED for < 80%
  const redCF = bodyRange.addConditionalFormat(ExcelScript.ConditionalFormatType.custom).getCustom();
  redCF.getFormat().getFill().setColor("#FFC7CE");
  redCF.getRule().setFormula(`=$${percentColLetter}${startRow}<0.8`);

  // GREEN for >= 80%
  const greenCF = bodyRange.addConditionalFormat(ExcelScript.ConditionalFormatType.custom).getCustom();
  greenCF.getFormat().getFill().setColor("#C6EFCE");
  greenCF.getRule().setFormula(`=$${percentColLetter}${startRow}>=0.8`);

  // Filter the table to keep only rows that contain one of the keywords in column D
  const keywords = ["comfy", "comfi", "комфі"];
  const tableData = table.getRangeBetweenHeaderAndTotal().getValues();
  const filteredRows = tableData.filter(row =>
    row.some(cell =>
      typeof cell === "string" &&
      keywords.some(keyword => cell.toLowerCase().includes(keyword))
    )
  );

  // Clear original rows again
  table.getRangeBetweenHeaderAndTotal().delete(ExcelScript.DeleteShiftDirection.up);

  // Add filtered rows back with formulas in "Percentage" column
  if (filteredRows.length > 0) {
    table.addRows(-1, filteredRows);
    percentageCol.getRangeBetweenHeaderAndTotal()
      .setFormulasLocal(Array(filteredRows.length)
        .fill([`=[@[${durationColumn}]]/[@[Training Duration]]`]));
    percentageCol.getRangeBetweenHeaderAndTotal().setNumberFormat("0%");
  }

  // Remove specified columns dynamically by title
  const columnsToRemove = ["First Name", "Last Name", "Role", "Attendee Email", "Connection Type"];
  columnsToRemove.forEach(columnName => {
    const colIdx = headers.indexOf(columnName);
    if (colIdx !== -1) {
      table.getColumnByName(columnName).delete();
    }
  });

  // Set time format for columns B, C, E, and F
  const timeFormat = "hh:mm:ss";
  sheet.getRange("B:B").setNumberFormat(timeFormat);
  sheet.getRange("C:C").setNumberFormat(timeFormat);
  sheet.getRange("E:E").setNumberFormat(timeFormat);
  sheet.getRange("F:F").setNumberFormat(timeFormat);

  // Set value for column I within the table
  table.getColumnByName("Training Duration").getRangeBetweenHeaderAndTotal()
    .setValues(Array(table.getRowCount()).fill([90]));

  // Format column J as percentage
  table.getColumnByName("Percentage").getRangeBetweenHeaderAndTotal().setNumberFormat("0%");

  // Auto-fit all columns based on the used range.
  sheet.getUsedRange().getFormat().autofitColumns();

  // Select the entire dataset (excluding the header row) for easy manual copying.
  const finalRange = table.getRangeBetweenHeaderAndTotal();
  finalRange.select();
}
